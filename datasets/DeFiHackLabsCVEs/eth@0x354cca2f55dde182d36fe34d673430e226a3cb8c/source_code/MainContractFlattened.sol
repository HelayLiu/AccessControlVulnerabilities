// SPDX-License-Identifier: MIT
// This file was auto-generated by a flattening script.

pragma solidity 0.8.20;



// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)


// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)


/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```solidity
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 *
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized != type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal onlyInitializing {
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal onlyInitializing {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)


/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuardUpgradeable is Initializable {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    function __ReentrancyGuard_init() internal onlyInitializing {
        __ReentrancyGuard_init_unchained();
    }

    function __ReentrancyGuard_init_unchained() internal onlyInitializing {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)


/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    function mint(address to, uint256 amount) external returns (bool);
    function burn(uint256 amount) external returns (bool);
    function transferOwnership(address newOwner) external;
}




interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}
interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IUniswapV2Factory {
    
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    
}

contract XBridge is OwnableUpgradeable, ReentrancyGuardUpgradeable {

    uint256 public listingFee;
    address public factory;
    address public tokenFeeCollector;
    address public listingFeeCollector;
    address[] public admin;
    address public usdt;
    IUniswapV2Router02 public router;
    uint256 public thresholdLimit;

    struct tokenInfo {
        address token;
        uint256 chain;
    }

    mapping(address => bool) public isBase;
    mapping(address => bool) public isWrapped;
    mapping(address => uint256) public tokenTax;
    mapping(uint256 => bool) public chainSupported;
    mapping(address => uint256) public feesForToken;
    mapping(address => uint256) public tokenChainId;
    mapping(address => address) public tokenToToken;
    mapping(address => bool) public excludeFeeFromListing;
    mapping(address => mapping(address => bool)) public isMintable;
    mapping(uint256 => mapping(address => uint256)) public inNonce;
    mapping(address => mapping(address => address)) public tokenOwner;
    mapping(address => mapping(address => uint256)) public tokenDeposited;
    mapping(address => mapping(address => uint256)) public tokenWithdrawn;
    mapping(uint256 => mapping(address => mapping(uint256 => bool))) public nonceProcessed;

    event Locked(address indexed user, address indexed inToken, address indexed outToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 isWrapped, uint256 srcId, uint256 dstId);
    event UnLocked(address indexed user, address indexed outToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 srcId, uint256 dstId);
    event TokenListed(address indexed baseToken, uint256 baseTokenChain, address indexed correspondingToken, uint256 correspondingTokenChain, bool isMintable, address indexed user);
    event TokenDelisted(address indexed baseToken, uint256 baseTokenChain, address indexed correspondingToken, uint256 correspondingTokenChain);
    event TokenDeposited(address indexed user, uint256 amount);
    event TokenWithdrawn(address indexed user, address indexed receiver, uint256 amount);
    event SignersChanged(address[] indexed newSigners);
    event ChainSupported(uint256 _chain, bool _supported);
    event FeeExcludedFromListing(address indexed user, bool ifExcluded);
    event TokenFee(address indexed _token, uint256 _fee);

    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public isWrappedWithChainId;
    mapping(uint256 => mapping(uint256 => mapping(address => mapping(address => address)))) public tokenOwnerWithChainId;
    mapping(uint256 => mapping(uint256 => mapping(address => address))) public tokenToTokenWithChainId;
    mapping(uint256 => mapping(uint256 => mapping(address => mapping(address => bool)))) public isMintableWithChainId;
    mapping(address => address) public _tokenOwner;

    address public native;                          // 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

    constructor() {
        _disableInitializers();
    }

    function initialize(address[] memory _admin, uint256 _listingFee, address _tokenFeeCollector, address _listingFeeCollector, address _router, address _factory, address _usdt) external initializer {
        require(_admin.length >= 3, "MINIMUM_SIGNERS_SHOULD_BE_3");
        require(_listingFee > 0, "LISTING_FEE_CANT_BE_ZERO");
        require(_tokenFeeCollector != address(0) && _listingFeeCollector != address(0), "CANT_PROVIDE_ZERO_ADDRESS");
        __Ownable_init();
        __ReentrancyGuard_init();
        admin = _admin;
        listingFee = _listingFee;
        tokenFeeCollector = _tokenFeeCollector;
        listingFeeCollector = _listingFeeCollector;
        router = IUniswapV2Router02(_router);
        factory = _factory;
        usdt = _usdt;
        thresholdLimit = 100 * 10**6;
        // native = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    }

    /** 
     * @dev cannot receive eth directly
     */
    receive() external payable {
        revert("DIRECT_ETH_TRANSFER_NOT_SUPPORTED");
    }

     /** 
     * @dev cannot receive eth directly
     */
    fallback() external payable {
        revert("DIRECT_ETH_TRANSFER_NOT_SUPPORTED");
    }


    /**
     * @dev Lock the `_amount` of `inTokens` in the bridge contract for `dstId` chain.
     * @param inToken locking token address
     * @param _amount amount of token to lock
     * @param dstId destination chain on which user will claim token
     * Emits a {Locked} event.
     */
    function lock(address inToken, uint256 _amount, uint256 dstId) external payable nonReentrant {
        require(_amount > 0, "AMOUNT_CANT_BE_ZERO");    
        require(inToken != address(0), "TOKEN_ADDRESS_CANT_BE_NULL");
        // require(inToken.code.length > 0, "TOKEN_NOT_ON_THIS_CHAIN");
        
        require(chainSupported[dstId], "INVALID_CHAIN");

        uint256 srcId;
        assembly {
            srcId := chainid()
        }

        address outToken = tokenToTokenWithChainId[srcId][dstId][inToken];
        require(outToken != address(0), "UNSUPPORTED_TOKEN");

        uint256 _isWrapped;

        if(isWrappedWithChainId[srcId][dstId][inToken]) _isWrapped = 1;
        else if(inToken == native || outToken == native) _isWrapped =2;
        else _isWrapped = 0;
        
        address _user = msg.sender;
        uint256 tokenAmount;
        uint256 fee = feesForToken[inToken];
        uint256 feesAmount;
        

        if(_isWrapped == 0) {
                
                (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee);

                emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);

        } else if(_isWrapped == 1) {

                (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee);

                burn(inToken, tokenAmount+feesAmount);

                emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);
            
        } else if (_isWrapped == 2) {

            if(inToken == native) {
                tokenAmount = _amount;
                fee = feesForToken[inToken];

                if(fee > 0) {
                    feesAmount = _amount * fee / 100;
                    tokenAmount -= feesAmount;
                }
                require(_amount == msg.value, "LESS_LOCKING");

                emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);
            } else {
                (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee);

                emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);
            }

        }

    }




    /**
     * @dev Unlock the `amount` of tokens corresponding to `inToken`
     * @param inToken locked token address
     * @param amount amount of token to unlock
     * @param feeAmount fee on locked amount on source chain
     * @param _nonce user lock nonce on source chain
     * @param _isWrapped 1 if inToken is mintable otherwise 0
     * @param srcId source chain on which user has locked token
     * @param r[] r part of the signature of the signers
     * @param s[] s part of the signature of the signers
     * @param v[] v part of the signature of the signers
     * Emits a {unLocked} event.
     */
    function unlock(address inToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 _isWrapped, uint256 srcId, bytes32[] memory r, bytes32[] memory s, uint8[] memory v) external payable nonReentrant {
        address user = msg.sender;
        require(inToken != address(0), "TOKEN_ADDRESS_CANT_BE_NULL");
        require(user != address(0), "INVALID_RECEIVER");
        require(amount > 0, "AMOUNT_CANT_BE_ZERO");

        require(!nonceProcessed[srcId][user][_nonce], "NONCE_ALREADY_PROCESSED");
        require(chainSupported[srcId], "INVALID_CHAIN");
        

        uint256 dstId;
        assembly {
            dstId := chainid()
        }

        address outToken = tokenToTokenWithChainId[srcId][dstId][inToken];
        require(outToken != address(0), "UNSUPPORTED_TOKEN");

        bool mintable = isMintableWithChainId[srcId][dstId][inToken][outToken];

        bool success = verify(address(this), user, inToken, outToken, _nonce, amount, feeAmount, _isWrapped, srcId, dstId, r, s, v);
        require(success, "INVALID_RECOVERED_SIGNER");
        if(!mintable && outToken !=native) require((IERC20(outToken).balanceOf(address(this)) - tokenTax[outToken]) >= (amount + feeAmount), "INSUFFICIENT_LIQUIDITY_IN_BRIDGE");

        // inToken is base token then isWrapped = 0
        // inToken is wrapped token then isWrapped = 1

        nonceProcessed[srcId][user][_nonce] = true;

        if(_isWrapped == 0) {

            if(mintable) {
                if(feeAmount > 0) mint(outToken, tokenFeeCollector, feeAmount);
                mint(outToken, user, amount);
            } else {
                if(feeAmount > 0) {
                    tokenTax[outToken] += feeAmount;
                }
                success = IERC20(outToken).transfer(user, amount);
                if(!success) revert("TOKEN_TRANSFER_FAILED");
            }

            
        } else if(_isWrapped == 1) {
            if(outToken == native) {
                require(address(this).balance >= amount+feeAmount, "INSUFFICIENT_FUND_IN_BRIDE");
                if(feeAmount > 0) {
                    (success, ) = payable(tokenFeeCollector).call{value: feeAmount}("");
                    require(success, "FEE_TRANSFER_FAILED");
                }

                (success, ) = payable(user).call{value: amount}("");
                require(success, "NATIVE_COIN_TRANSFER_FAILED");
            } else {

                if(feeAmount > 0) {
                    tokenTax[outToken] += feeAmount;
                }
                success = IERC20(outToken).transfer(user, amount);
                if(!success) revert("TOKEN_TRANSFER_FAILED");
            }

        } else if(_isWrapped == 2) {
            if(outToken == native) {
                require(address(this).balance >= amount+feeAmount, "INSUFFICIENT_FUND_IN_BRIDE");
                if(feeAmount > 0) {
                    (success, ) = payable(tokenFeeCollector).call{value: feeAmount}("");
                    require(success, "FEE_TRANSFER_FAILED");
                }

                (success, ) = payable(user).call{value: amount}("");
                require(success, "NATIVE_COIN_TRANSFER_FAILED");

            } else if(mintable) {
                if(feeAmount > 0) mint(outToken, tokenFeeCollector, feeAmount);
                mint(outToken, user, amount);
            } else {
                if(feeAmount > 0) {
                    tokenTax[outToken] += feeAmount;
                }
                success = IERC20(outToken).transfer(user, amount);
                if(!success) revert("TOKEN_TRANSFER_FAILED");
            }
        }

        if(outToken != native && IUniswapV2Factory(router.factory()).getPair(outToken, router.WETH()) != address(0) && tokenTax[outToken] > 0) {
            address[] memory path = new address[](3);
            path[0] = outToken;
            path[1] = router.WETH();
            path[2] = usdt;
            uint _amount = router.getAmountsOut(tokenTax[outToken], path)[2];
            if(_amount >= thresholdLimit) {
                swapTokensForETH(outToken, tokenTax[outToken], router.WETH());
                tokenTax[outToken] = 0;
            }
            
        } else if(outToken != native && IUniswapV2Factory(router.factory()).getPair(outToken, usdt) != address(0) && tokenTax[outToken] > 0) {
            address[] memory path = new address[](2);
            path[0] = outToken;
            path[1] = usdt;
            uint _amount = router.getAmountsOut(tokenTax[outToken], path)[1];
            if(_amount >= thresholdLimit) {
                swapTokensForETH(outToken, tokenTax[outToken], usdt);
                tokenTax[outToken] = 0;
            }
        }
    
        emit UnLocked(user, outToken, amount,  feeAmount, _nonce, srcId, dstId);
    }

    function swapTokensForETH(address _token, uint256 _amount, address pairToken) internal {
        
        safeApprove(_token, address(router), _amount);
        if(pairToken == router.WETH()) {
            address[] memory path = new address[](2);
            path[0] = _token;
            path[1] = pairToken;
            router.swapExactTokensForETHSupportingFeeOnTransferTokens(_amount, 0, path, tokenFeeCollector, block.timestamp);

        } else {
                address[] memory path = new address[](3);
                path[0] = _token;
                path[1] = usdt;
                path[2] = router.WETH();
            router.swapExactTokensForETHSupportingFeeOnTransferTokens(_amount, 0, path, tokenFeeCollector, block.timestamp);

        }

    }

    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "APPROVE_FAILED");
    }




    /**
     * @dev internal function to call mint function of the token address
     */
    function mint(address token, address to, uint256 amount) internal {
        bytes memory init = returnHash(to, amount);
        if (init.length > 0) call(init, token);
                    
    }

    /**
     * @dev internal function to call burn function of the token address
     */
    function burn(address token, uint256 amount) internal {
        bytes memory init = returnHash(amount);
        if (init.length > 0) call(init, token);
                    
    }
    
    /**
     * @dev function to calculate the fees amount and transfer token from user to this contract
     */
    function transferAndCalcAmountAndFees(address token, address _user, uint256 amount, uint256 fee) private returns(uint256 tokenAmount, uint256 feeAmount) {

                uint256 beforeAmount = (IERC20(token).balanceOf(address(this)));
                bool success = IERC20(token).transferFrom(_user, address(this), amount);
                if(!success) revert("TRANSFER_FAILED_WHILE_LOCKING");
                tokenAmount = (IERC20(token).balanceOf(address(this))) - beforeAmount;
            
                if(fee > 0) {
                    feeAmount = tokenAmount * fee / 10000;
                    tokenAmount -= feeAmount;
                }
    }

    /**
     * @dev function to verify the authenticity of the signatures provided in form of r[], s[] and v[] 
     */

    function verify(address dstContract, address user, address inToken, address outToken, uint256 nonce, uint256 amount, uint256 feeAmount, uint256 _isWrapped, uint256 srcId, uint256 dstId, bytes32[] memory sigR, bytes32[] memory sigS, uint8[] memory sigV) internal view returns (bool) {
        uint256 len = admin.length;
        require(sigR.length == len && sigS.length == len && sigV.length == len, "INVALID_NUMBER_OF_SIGNERS");
        for(uint i=0; i<len; ++i) {
            bytes32 hash = prefixed(keccak256(abi.encodePacked(dstContract, user, inToken, outToken, nonce, amount, feeAmount, _isWrapped, srcId, dstId)));
            address signer = ecrecover(hash, sigV[i], sigR[i], sigS[i]);
            require(signer != address(0), "INVALID_SIGNATURE");
            require(admin[i] == signer, "INVALID_VALIDATOR");
        }
        return true;
    }
    /**
     * @dev making hash EIP-191 compatible
     */
    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev returning the encoded mint function to call
     */
    function returnHash(address to, uint256 amount) internal pure returns(bytes memory data) {
        data = abi.encodeWithSignature("mint(address,uint256)", to, amount);
    }

     /**
     * @dev calling the `token` contract with `callData`
     */
    function call(bytes memory callData, address token) internal {
        IERC20 _token = IERC20(payable(token));
        assembly 
                    {
                        if eq(call(gas(), _token, 0, add(callData, 0x20), mload(callData), 0, 0), 0) {
                            revert(0, 0)
                        }
                    }
    }

    /**
     * @dev returning the encoded mint function to call
     */
    function returnHash(uint256 amount) internal pure returns(bytes memory data) {
        data = abi.encodeWithSignature("burn(uint256)", amount);
    }

    /**
     * @dev token owner can list the pair of their token with their corresponding chain id
     * @param baseToken struct that contains token address and its corresponding chain id
     * @param correspondingToken struct that contains token address and its corresponding chain id
     * @param _isMintable if corresponding token address is mintable then its `true` otherwise `false`
     */
    function listToken(tokenInfo memory baseToken, tokenInfo memory correspondingToken, bool _isMintable) external payable {
        address _baseToken = baseToken.token;
        address _correspondingToken = correspondingToken.token;
        require(_baseToken != address(0), "INVALID_ADDR");
        require(_correspondingToken != address(0), "INVALID_ADDR");
        require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] == address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] == address(0), "THIS_PAIR_ALREADY_LISTED");

        isMintableWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = _isMintable;
        isMintableWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = _isMintable;
        isMintableWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = _isMintable;
        isMintableWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = _isMintable;

        tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] = _correspondingToken;
        tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = _baseToken;
        tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken] = _correspondingToken;
        tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = _baseToken;


        if(_isMintable) {
            isWrappedWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = true;
            isWrappedWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = true;
            isWrapped[_correspondingToken] = true;

        }

        tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = msg.sender;
        tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = msg.sender;
        tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = msg.sender;
        tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = msg.sender;

        if(_baseToken == _correspondingToken) _tokenOwner[_baseToken] = msg.sender;
        else {
            if(_baseToken.code.length > 0) _tokenOwner[_baseToken] = msg.sender;
            else _tokenOwner[_correspondingToken] = msg.sender;
        }

        if(!excludeFeeFromListing[msg.sender]) transferListingFee(listingFeeCollector, msg.sender, msg.value);

        emit TokenListed(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain, _isMintable, msg.sender);

    }

    /**
     * @dev platform owner can delist the pair of the token
     * @param baseToken struct that contains token address and its corresponding chain id
     * @param correspondingToken struct that contains token address and its corresponding chain id
     */
    function delistTokenByOwner(tokenInfo memory baseToken, tokenInfo memory correspondingToken) external onlyOwner {
        address _baseToken = baseToken.token;
        address _correspondingToken = correspondingToken.token;
        require(_baseToken != address(0), "INVALID_ADDR");
        require(_correspondingToken != address(0), "INVALID_ADDR");
        require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] != address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] != address(0), "THIS_PAIR_ALREADY_LISTED");

        delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken];
        delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken];
        delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken];
        delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken];

        delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken];
        delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken];
        delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken];
        delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken];

        emit TokenDelisted(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain);
    }

    /**
     * @dev token lister can delist the pair of the token
     * @param baseToken struct that contains token address and its corresponding chain id
     * @param correspondingToken struct that contains token address and its corresponding chain id
     */
    function delistTokenByUser(tokenInfo memory baseToken, tokenInfo memory correspondingToken) external {
        address _baseToken = baseToken.token;
        address _correspondingToken = correspondingToken.token;
        // require(tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] == msg.sender, "NOT_TOKEN_OWNER");
        require(_tokenOwner[_baseToken] == msg.sender || _tokenOwner[_correspondingToken] == msg.sender, "NOT_TOKEN_OWNER");
        require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] != address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] != address(0), "ALREADY_DELISTED");

        require(_baseToken != address(0), "INVALID_ADDR");
        require(_correspondingToken != address(0), "INVALID_ADDR");

        delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken];
        delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken];
        delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken];
        delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken];

        delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken];
        delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken];
        delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken];
        delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken];

        emit TokenDelisted(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain);
    }

    /**
     * @dev take the listing fee while listing token
     */
    function transferListingFee(address to, address _user,  uint256 _value) private nonReentrant {
        require(to != address(0), "CANT_SEND_TO_NULL_ADDRESS");
        require(_value >= listingFee, "INCREASE_LISTING_FEE");
        (bool success, ) = payable(to).call{value:listingFee}("");
        require(success, "LISTING_FEE_TRANSFER_FAILED");
        uint256 remainingEth = _value - listingFee;
        if (remainingEth > 0) {
            (success,) = payable(_user).call{value: remainingEth}("");
            require(success, "REFUND_REMAINING_ETHER_SENT_FAILED");
        }
    }


    /**
    * @dev owner can change the listing fee
    */
    function setListingFee(uint256 newFee) external onlyOwner {
        require(newFee != listingFee, "SAME_FEE_PROVIDED");
        require(newFee >= 0, "INVALID_FEE");
        listingFee = newFee;
    }

    /**
    * @dev owner can change the listing fee collector address
    */
    function setListingFeeCollector(address collector) external onlyOwner {
        require(collector != address(0), "CANT_BE_NULL_ADDRESS");
        listingFeeCollector = collector;
    }

    /**
    * @dev owner can exclude particular address to give the listing fee while listing token
    */
    function setExcludeFeeFromListing(address user, bool ifExcluded) external onlyOwner {
        require(user != address(0), "CANT_BE_NULL_ADDRESS");
        // require(!excludeFeeFromListing[user], "ALREADY_EXCLUDED");
        bool _previousState = excludeFeeFromListing[user];

        if(_previousState == ifExcluded) revert("ALREADY_SET");
        else excludeFeeFromListing[user] = ifExcluded;

        emit FeeExcludedFromListing(user, ifExcluded);
    }

    /**
    * @dev owner can change the signer addresses 
    */
    function changeAdmin(address[] memory newAdmin) external onlyOwner {
        require(newAdmin.length >= 3, "VALIDATORS_ARE_LESS_THAN_3");
        admin = newAdmin;

        emit SignersChanged(newAdmin);
    }

    /**
    * @dev owner can set fee for particular token for bridging 
    */
    function setFeeForToken(address token, uint256 fee) external onlyOwner {
        require(token != address(0), "INVALID_TOKEN");
        require(fee < 10000, "FEE_CANT_BE_100%");
        feesForToken[token] = fee;

        emit TokenFee(token, fee);
    }

    /**
    * @dev owner can set if particular chain is supported or not 
    */
    function setChainSupported(uint256 chainId, bool supported) external onlyOwner {
        require(chainId != 0, "INVALID_CHAIN_ID");
        chainSupported[chainId] = supported;
        emit ChainSupported(chainId, supported);
    }

     /**
    * @dev owner can change the token fee collector address
    */
    function setFeeCollector(address collector) external onlyOwner {
        require(collector != address(0), "INVALID_OWNER");
        tokenFeeCollector = collector;
    }

     /**
    * @dev returns total number of signers that are verified while unlocking the tokens 
    */
    function getTotalSigners() external view returns(uint256) {
        return admin.length;
    }

    /**
    * @dev token lister has to deposit tokens if none of the listed token are mintable or burnable
    * @param token token address to deposit in bridge contract 
    * @param amount amount of tokens to deposit in bridge contract
    */
    function depositTokens(address token, uint256 amount) external payable {
        // address _correspondingToken = tokenToTokenWithChainId[srcId][dstId][token];
        // require(_correspondingToken != address(0), "TOKEN_NOT_LISTED");
        require(amount > 0, "AMOUNT_CANT_BE_ZERO");
        address user = msg.sender;
        require(user == _tokenOwner[token], "ONLY_LISTER_CAN_DEPOSIT");
        // require(user == tokenOwnerWithChainId[srcId][dstId][token][_correspondingToken], "ONLY_LISTER_CAN_DEPOSIT");
        uint256 actualBal;
        if(token != native) {
            require(token.code.length > 0, "TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN");
            uint256 beforeBal = IERC20(token).balanceOf(address(this));
            IERC20(token).transferFrom(user, address(this), amount);
            actualBal = IERC20(token).balanceOf(address(this)) - beforeBal;
        } else actualBal = msg.value;

        emit TokenDeposited(user, actualBal);
    }

    /**
    * @dev token lister can withdraw tokens 
    * @param token token address to withdraw from bridge contract 
    * @param receiver address to recive the withdrawn tokens
    * @param amount amount of tokens to deposit in bridge contract
    */
    function withdrawTokens(address token, address receiver, uint256 amount) external {
        // require(token.code.length > 0, "TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN");
        // address _correspondingToken = tokenToTokenWithChainId[srcId][dstId][token];
        require(token != address(0), "TOKEN_NOT_LISTED");
        require(amount > 0, "AMOUNT_CANT_BE_ZERO");
        address user = msg.sender;
        require(user == _tokenOwner[token], "ONLY_TOKEN_LISTER_CAN_WITHDRAW");
        // require(user == tokenOwnerWithChainId[srcId][dstId][token][_correspondingToken], "ONLY_TOKEN_LISTER_CAN_WITHDRAW");

        if(token != native) {

            require(amount <= (IERC20(token).balanceOf(address(this)) - tokenTax[token]), "WITHDRAW_LESS");

            if(isWrapped[token]) revert("CANT_WITHDRAW_WRAPPED_TOKENS");

            IERC20(token).transfer(receiver, amount);
        } else {
            require(amount <= address(this).balance, "WITHDRAW_LESS");
            (bool success, ) = payable(receiver).call{value: amount}("");
            require(success, "WITHDRAW_FAILED");
        }

        emit TokenWithdrawn(user, receiver, amount);
    }

    function claimTax(address token, bool pairWithEth, bool withdrawAnyAmount) external onlyOwner {

        if(pairWithEth && tokenTax[token] > 0) {
            address[] memory path = new address[](3);
            path[0] = token;
            path[1] = router.WETH();
            path[2] = usdt;
            uint _amount = router.getAmountsOut(tokenTax[token], path)[2];
            if(_amount >= thresholdLimit || withdrawAnyAmount) {
                swapTokensForETH(token, tokenTax[token], router.WETH());
                tokenTax[token] = 0;
            }
            
        } else if(!pairWithEth && tokenTax[token] > 0) {
            address[] memory path = new address[](2);
            path[0] = token;
            path[1] = usdt;
            uint _amount = router.getAmountsOut(tokenTax[token], path)[1];
            if(_amount >= thresholdLimit || withdrawAnyAmount) {
                swapTokensForETH(token, tokenTax[token], usdt);
                tokenTax[token] = 0;
            }
        }
    }

    function viewTax(address token, bool pairWithEth) external view returns(uint _amount) {

        if(pairWithEth && tokenTax[token] > 0) {
            address[] memory path = new address[](3);
            path[0] = token;
            path[1] = router.WETH();
            path[2] = usdt;
            _amount = router.getAmountsOut(tokenTax[token], path)[2];
           
            
        } else if(!pairWithEth && tokenTax[token] > 0) {
            address[] memory path = new address[](2);
            path[0] = token;
            path[1] = usdt;
            _amount = router.getAmountsOut(tokenTax[token], path)[1];
           
        } else _amount = 0;
    }

    /**
    * @dev token lister can change their ownership of listing tokens
    * @param token token address to change its lister owner
    * @param newOwner new owner address
    */
    function changeTokenLister(address token, address newOwner, uint256 srcId, uint256 dstId) external {
        require(token.code.length > 0, "TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN");
        require(newOwner != address(0), "NEW_OWNER_CANT_BE_NULL");
        address _correspondingToken = tokenToTokenWithChainId[srcId][dstId][token];
        require(_correspondingToken != address(0), "TOKEN_NOT_LISTED");
        address user = msg.sender;
        require(tokenOwnerWithChainId[srcId][dstId][token][_correspondingToken] == user, "ONLY_TOKEN_LISTER_CAN_CHANGE");

        tokenOwnerWithChainId[srcId][dstId][token][_correspondingToken] = newOwner;
        tokenOwnerWithChainId[srcId][dstId][_correspondingToken][token] = newOwner;
        tokenOwnerWithChainId[dstId][srcId][token][_correspondingToken] = newOwner;
        tokenOwnerWithChainId[dstId][srcId][_correspondingToken][token] = newOwner;
    }

    /**
    * @dev returns the addresses of signers
    */
    function getSigners() external view returns(address[] memory ) {
        return admin;
    }

    function setThresholdLimit(uint256 _amount) external onlyOwner {
        thresholdLimit = _amount;
    }

    function setRouter(address _router) external onlyOwner {
        router = IUniswapV2Router02(_router);
    }

    function setUsdt(address _usdt) external onlyOwner {
        require(_usdt != address(0), "CANT_BE_NULL_ADDRESS");
        usdt = _usdt;
    }

    function setNative(address _native) external onlyOwner {
        require(_native != address(0), "CANT_BE_NULL_ADDRESS");
        native = _native;
    }

    function migrateData(tokenInfo memory baseToken, tokenInfo memory correspondingToken, bool _isMintable, address lister) external onlyOwner {
        address _baseToken = baseToken.token;
        address _correspondingToken = correspondingToken.token;
        require(_baseToken != address(0), "INVALID_ADDR");
        require(_correspondingToken != address(0), "INVALID_ADDR");
        require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] == address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] == address(0), "THIS_PAIR_ALREADY_LISTED");

        isMintableWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = _isMintable;
        isMintableWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = _isMintable;
        isMintableWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = _isMintable;
        isMintableWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = _isMintable;

        tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] = _correspondingToken;
        tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = _baseToken;
        tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken] = _correspondingToken;
        tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = _baseToken;


        if(_isMintable) {
            isWrappedWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = true;
            isWrappedWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = true;
            isWrapped[_correspondingToken] = true;

        }

        tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = lister;
        tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = lister;
        tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = lister;
        tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = lister;

        if(_baseToken == _correspondingToken) _tokenOwner[_baseToken] = lister;
        else {
            if(_baseToken.code.length > 0) _tokenOwner[_baseToken] = lister;
            else _tokenOwner[_correspondingToken] = lister;
        }
    }
    
}