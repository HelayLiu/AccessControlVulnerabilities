{
    "SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File Contracts/IRoyaltyRegistry.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRoyaltyRegistry {\r\n    function addRegistrant(address registrant) external;\r\n\r\n    function removeRegistrant(address registrant) external;\r\n\r\n    function setRoyalty(address _erc721address, address payable _payoutAddress, uint256 _payoutPerMille) external;\r\n\r\n    function getRoyaltyPayoutAddress(address _erc721address) external view returns (address payable);\r\n\r\n    function getRoyaltyPayoutRate(address _erc721address) external view returns (uint256);\r\n}\r\n\r\n\r\n// File Contracts/ICancellationRegistry.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICancellationRegistry {\r\n    function addRegistrant(address registrant) external;\r\n\r\n    function removeRegistrant(address registrant) external;\r\n\r\n    function cancelOrder(bytes memory signature) external;\r\n\r\n    function isOrderCancelled(bytes memory signature) external view returns (bool);\r\n\r\n    function cancelPreviousSellOrders(address seller, address tokenAddr, uint256 tokenId) external;\r\n\r\n    function getSellOrderCancellationBlockNumber(address addr, address tokenAddr, uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\n\r\n// File Contracts/IPaymentERC20Registry.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPaymentERC20Registry {  \r\n  function isApprovedERC20(address _token) external view returns (bool);\r\n\r\n  function addApprovedERC20(address _token) external;\r\n\r\n  function removeApprovedERC20(address _token) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC721.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/IERC1155.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC1155.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC20.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165Checker.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\r\n        internal\r\n        view\r\n        returns (bool[] memory)\r\n    {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\r\n        if (result.length < 32) return false;\r\n        return success && abi.decode(result, (bool));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File Contracts/ExchangeV4.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/* Interfaces */\r\n\r\n\r\n\r\n/* Libraries */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ExchangeV4 is Ownable, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using ERC165Checker for address;\r\n\r\n    bytes4 private InterfaceId_ERC721 = 0x80ac58cd;  // The ERC-165 identifier for 721\r\n    bytes4 private InterfaceId_ERC1155 = 0xd9b67a26; // The ERC-165 identifier for 1155\r\n\r\n    address payable _makerWallet;\r\n    uint256 private _makerFeePerMille = 25;\r\n    uint256 private _maxRoyaltyPerMille = 150;\r\n\r\n    bytes32 private EIP712_DOMAIN_TYPE_HASH = keccak256(\"EIP712Domain(string name,string version)\");\r\n    bytes32 private DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            EIP712_DOMAIN_TYPE_HASH,\r\n            keccak256(bytes(\"Quixotic\")),\r\n            keccak256(bytes(\"4\"))\r\n        ));\r\n\r\n    IRoyaltyRegistry royaltyRegistry;\r\n    ICancellationRegistry cancellationRegistry;\r\n    IPaymentERC20Registry paymentERC20Registry;\r\n\r\n    event SellOrderFilled(address indexed seller, address payable buyer, address indexed contractAddress, uint256 indexed tokenId, uint256 price);\r\n    event BuyOrderFilled(address indexed seller, address payable buyer, address indexed contractAddress, uint256 indexed tokenId, uint256 price);\r\n    event DutchAuctionFilled(address indexed seller, address payable buyer, address indexed contractAddress, uint256 indexed tokenId, uint256 price);\r\n\r\n\r\n    /* This contains all data of the SellOrder */\r\n    struct SellOrder {\r\n\r\n        /* Seller of the NFT */\r\n        address payable seller;\r\n\r\n        /* Contract address of NFT */\r\n        address contractAddress;\r\n\r\n        /* Token id of NFT to sell */\r\n        uint256 tokenId;\r\n\r\n        /* Start time in unix timestamp */\r\n        uint256 startTime;\r\n\r\n        /* Expiration in unix timestamp */\r\n        uint256 expiration;\r\n\r\n        /* Price in wei */\r\n        uint256 price;\r\n\r\n        /* Number of tokens to transfer; should be 1 for ERC721 */\r\n        uint256 quantity;\r\n\r\n        /* Block number that this order was created at */\r\n        uint256 createdAtBlockNumber;\r\n\r\n        /* Address of the ERC20 token for the payment. Will be the zero-address for payments in native ETH. */\r\n        address paymentERC20;\r\n    }\r\n\r\n    /* This contains all data of the BuyOrder */\r\n    struct BuyOrder {\r\n\r\n        /* Seller of the NFT */\r\n        address payable buyer;\r\n\r\n        /* Contract address of NFT */\r\n        address contractAddress;\r\n\r\n        /* Token id of NFT to sell */\r\n        uint256 tokenId;\r\n\r\n        /* Start time in unix timestamp */\r\n        uint256 startTime;\r\n\r\n        /* Expiration in unix timestamp */\r\n        uint256 expiration;\r\n\r\n        /* Price in wei */\r\n        uint256 price;\r\n\r\n        /* Number of tokens to transfer; should be 1 for ERC721 */\r\n        uint256 quantity;\r\n\r\n        /* Address of the ERC20 token for the payment. */\r\n        address paymentERC20;\r\n    }\r\n\r\n    struct DutchAuctionOrder {\r\n\r\n        /* Seller of the NFT */\r\n        address payable seller;\r\n\r\n        /* Contract address of NFT */\r\n        address contractAddress;\r\n\r\n        /* Token id of NFT to sell */\r\n        uint256 tokenId;\r\n\r\n        /* Start time in unix timestamp */\r\n        uint256 startTime;\r\n\r\n        /* End time in unix timestamp */\r\n        uint256 endTime;\r\n\r\n        /* Price in wei */\r\n        uint256 startPrice;\r\n\r\n        /* Price in wei */\r\n        uint256 endPrice;\r\n\r\n        /* Number of tokens to transfer; should be 1 for ERC721 */\r\n        uint256 quantity;\r\n\r\n        /* Block number that this order was created at */\r\n        uint256 createdAtBlockNumber;\r\n\r\n        /* Address of the ERC20 token for the payment. */\r\n        address paymentERC20;\r\n    }\r\n\r\n    /********************\r\n     * Public Functions *\r\n     ********************/\r\n\r\n    /*\r\n    * @dev External trade function. This accepts the details of the sell order and signed sell\r\n    * order (the signature) as a meta-transaction.\r\n    *\r\n    * Emits a {SellOrderFilled} event via `_fillSellOrder`.\r\n    */\r\n    function fillSellOrder(\r\n        address payable seller,\r\n        address contractAddress,\r\n        uint256 tokenId,\r\n        uint256 startTime,\r\n        uint256 expiration,\r\n        uint256 price,\r\n        uint256 quantity,\r\n        uint256 createdAtBlockNumber,\r\n        address paymentERC20,\r\n        bytes memory signature,\r\n        address payable buyer\r\n    ) external payable whenNotPaused nonReentrant {\r\n        // If the payment ERC20 is the zero address, we check that enough native ETH has been sent\r\n        // with the transaction. Otherwise, we use the supplied ERC20 payment token.\r\n        if (paymentERC20 == address(0)) {\r\n            require(msg.value >= price, \"Transaction doesn't have the required ETH amount.\");\r\n        } else {\r\n            _checkValidERC20Payment(buyer, price, paymentERC20);\r\n        }\r\n\r\n        SellOrder memory sellOrder = SellOrder(\r\n            seller,\r\n            contractAddress,\r\n            tokenId,\r\n            startTime,\r\n            expiration,\r\n            price,\r\n            quantity,\r\n            createdAtBlockNumber,\r\n            paymentERC20\r\n        );\r\n\r\n        /* Make sure the order is not cancelled */\r\n        require(\r\n            cancellationRegistry.getSellOrderCancellationBlockNumber(seller, contractAddress, tokenId) < createdAtBlockNumber,\r\n            \"This order has been cancelled.\"\r\n        );\r\n\r\n        /* Check signature */\r\n        require(_validateSellerSignature(sellOrder, signature), \"Signature is not valid for SellOrder.\");\r\n\r\n        // Check has started\r\n        require((block.timestamp > startTime), \"SellOrder start time is in the future.\");\r\n\r\n        // Check not expired\r\n        require((block.timestamp < expiration), \"This sell order has expired.\");\r\n\r\n        _fillSellOrder(sellOrder, buyer);\r\n    }\r\n\r\n    /*\r\n    * @dev Executes a trade given a buy order.\r\n    *\r\n    * Emits a {BuyOrderFilled} event.\r\n    */\r\n    function fillBuyOrder(\r\n        address payable buyer,\r\n        address contractAddress,\r\n        uint256 tokenId,\r\n        uint256 startTime,\r\n        uint256 expiration,\r\n        uint256 price,\r\n        uint256 quantity,\r\n        address paymentERC20,\r\n        bytes memory signature,\r\n        address payable seller\r\n    ) external payable whenNotPaused nonReentrant {\r\n        _checkValidERC20Payment(buyer, price, paymentERC20);\r\n\r\n        /* Make sure the order is not cancelled */\r\n        require(!isOrderCancelled(signature), \"This order has been cancelled.\");\r\n\r\n        BuyOrder memory buyOrder = BuyOrder(\r\n            buyer,\r\n            contractAddress,\r\n            tokenId,\r\n            startTime,\r\n            expiration,\r\n            price,\r\n            quantity,\r\n            paymentERC20\r\n        );\r\n\r\n        /* First check signature */\r\n        require(_validateBuyerSignature(buyOrder, signature), \"Signature is not valid for BuyOrder.\");\r\n\r\n        /* Check has started */\r\n        require((block.timestamp > buyOrder.startTime), \"This buy order's start time is in the future.\");\r\n\r\n        /* Check not expired */\r\n        require((block.timestamp < buyOrder.expiration), \"This buy order has expired.\");\r\n        \r\n        _fillBuyOrder(buyOrder, signature, seller);\r\n    }\r\n\r\n    /*\r\n    * @dev External trade function. This accepts the details of the dutch auction order and signed dutch auction\r\n    * order (the signature) as a meta-transaction.\r\n    *\r\n    * Emits a {DutchAuctionOrderFilled} event via `_fillDutchAuctionOrder`.\r\n    */\r\n    function fillDutchAuctionOrder(\r\n        DutchAuctionOrder memory dutchAuctionOrder,\r\n        bytes memory signature,\r\n        address payable buyer\r\n    ) external payable whenNotPaused nonReentrant {\r\n        /* Make sure the order is not cancelled */\r\n        require(\r\n            cancellationRegistry.getSellOrderCancellationBlockNumber(dutchAuctionOrder.seller, dutchAuctionOrder.contractAddress, dutchAuctionOrder.tokenId) < dutchAuctionOrder.createdAtBlockNumber,\r\n            \"This order has been cancelled.\"\r\n        );\r\n\r\n        /* First check signature */\r\n        require(_validateDutchAuctionSignature(dutchAuctionOrder, signature), \"Signature is not valid for DutchAuctionOrder.\");\r\n\r\n        // Check the dutch auction has started\r\n        require((block.timestamp > dutchAuctionOrder.startTime), \"This dutch auction order has not started yet.\");\r\n\r\n        // Check not expired\r\n        require((block.timestamp < dutchAuctionOrder.endTime), \"This dutch auction order has expired.\");\r\n\r\n        uint256 currentPrice = calculateCurrentPrice(\r\n            dutchAuctionOrder.startTime, \r\n            dutchAuctionOrder.endTime, \r\n            dutchAuctionOrder.startPrice,\r\n            dutchAuctionOrder.endPrice\r\n        );\r\n        // If the payment ERC20 is the zero address, we check that enough native ETH has been sent\r\n        // with the transaction. Otherwise, we use the supplied ERC20 payment token.\r\n        if (dutchAuctionOrder.paymentERC20 == address(0)) {\r\n            require(msg.value >= currentPrice, \"The current price is higher than the payment submitted.\");\r\n        } else {\r\n            _checkValidERC20Payment(buyer, currentPrice, dutchAuctionOrder.paymentERC20);\r\n        }\r\n\r\n        _fillDutchAuction(dutchAuctionOrder, buyer, currentPrice);\r\n    }\r\n\r\n    /*\r\n    * @dev Sets the royalty as an int out of 1000 that the creator should receive and the address to pay.\r\n    */\r\n    function setRoyalty(address contractAddress, address payable _payoutAddress, uint256 _payoutPerMille) external {\r\n        require(_payoutPerMille <= _maxRoyaltyPerMille, \"Royalty must be between 0 and 15%\");\r\n        require(contractAddress.supportsInterface(InterfaceId_ERC721) || contractAddress.supportsInterface(InterfaceId_ERC1155), \"Is not ERC721 or ERC1155\");\r\n\r\n        Ownable ownableNFTContract = Ownable(contractAddress);\r\n        require(_msgSender() == ownableNFTContract.owner());\r\n\r\n        royaltyRegistry.setRoyalty(contractAddress, _payoutAddress, _payoutPerMille);\r\n    }\r\n\r\n    /*\r\n    * @dev Cancels a buy order.\r\n    */\r\n    function cancelBuyOrder(\r\n        address payable buyer,\r\n        address contractAddress,\r\n        uint256 tokenId,\r\n        uint256 startTime,\r\n        uint256 expiration,\r\n        uint256 price,\r\n        uint256 quantity,\r\n        address paymentERC20,\r\n        bytes memory signature\r\n    ) external {\r\n        require((buyer == _msgSender() || owner() == _msgSender()), \"Caller must be Exchange Owner or Order Signer\");\r\n\r\n        BuyOrder memory buyOrder = BuyOrder(\r\n            buyer,\r\n            contractAddress,\r\n            tokenId,\r\n            startTime,\r\n            expiration,\r\n            price,\r\n            quantity,\r\n            paymentERC20\r\n        );\r\n\r\n        require(_validateBuyerSignature(buyOrder, signature), \"Signature is not valid for BuyOrder.\");\r\n\r\n        cancellationRegistry.cancelOrder(signature);\r\n    }\r\n\r\n    /*\r\n    * @dev Implements one-order-cancels-the-other (OCO) for a token\r\n    */\r\n    function cancelPreviousSellOrders(\r\n        address addr,\r\n        address tokenAddr,\r\n        uint256 tokenId\r\n    ) external {\r\n        require((addr == _msgSender() || owner() == _msgSender()), \"Caller must be Exchange Owner or Order Signer\");\r\n        cancellationRegistry.cancelPreviousSellOrders(addr, tokenAddr, tokenId);\r\n    }\r\n\r\n    function calculateCurrentPrice(uint256 startTime, uint256 endTime, uint256 startPrice, uint256 endPrice) public view returns (uint256) {\r\n        uint256 auctionDuration = (endTime - startTime);\r\n        uint256 timeRemaining = (endTime - block.timestamp);\r\n\r\n        uint256 perMilleRemaining = (1000000000000000 / auctionDuration) / (1000000000000 / timeRemaining);\r\n\r\n        uint256 variableAmount = startPrice - endPrice;\r\n        uint256 variableAmountRemaining = (perMilleRemaining * variableAmount) / 1000;\r\n        return endPrice + variableAmountRemaining;\r\n    }\r\n\r\n    /*\r\n    * @dev Gets the royalty payout address.\r\n    */\r\n    function getRoyaltyPayoutAddress(address contractAddress) external view returns (address) {\r\n        return royaltyRegistry.getRoyaltyPayoutAddress(contractAddress);\r\n    }\r\n\r\n    /*\r\n    * @dev Gets the royalty as a int out of 1000 that the creator should receive.\r\n    */\r\n    function getRoyaltyPayoutRate(address contractAddress) external view returns (uint256) {\r\n        return royaltyRegistry.getRoyaltyPayoutRate(contractAddress);\r\n    }\r\n\r\n    /*\r\n    * @dev Check if an order has been cancelled.\r\n    */\r\n    function isOrderCancelled(bytes memory signature) public view returns (bool) {\r\n        return cancellationRegistry.isOrderCancelled(signature);\r\n    }\r\n    \r\n    /*******************\r\n     * Admin Functions *\r\n     *******************/\r\n\r\n    /*\r\n    * @dev Sets the wallet for the exchange.\r\n    */\r\n    function setMakerWallet(address payable _newMakerWallet) external onlyOwner {\r\n        _makerWallet = _newMakerWallet;\r\n    }\r\n\r\n    /*\r\n    * @dev Sets the registry contracts for the exchange.\r\n    */\r\n    function setRegistryContracts(\r\n        address _royaltyRegistry,\r\n        address _cancellationRegistry,\r\n        address _paymentERC20Registry\r\n    ) external onlyOwner {\r\n        royaltyRegistry = IRoyaltyRegistry(_royaltyRegistry);\r\n        cancellationRegistry = ICancellationRegistry(_cancellationRegistry);\r\n        paymentERC20Registry = IPaymentERC20Registry(_paymentERC20Registry);\r\n    }\r\n\r\n    /*\r\n    * @dev Pauses trading on the exchange. To be used for emergencies.\r\n    */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /*\r\n    * @dev Resumes trading on the exchange. To be used for emergencies.\r\n    */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /*\r\n    * Withdraw just in case Ether is accidentally sent to this contract.\r\n    */\r\n    function withdraw() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    /**********************\r\n     * Internal Functions *\r\n     **********************/\r\n\r\n    /*\r\n    * @dev Executes a trade given a sell order.\r\n    *\r\n    * Emits a {SellOrderFilled} event.\r\n    */\r\n    function _fillSellOrder(SellOrder memory sellOrder, address payable buyer) internal {\r\n        /////////////////\r\n        ///  Finalize ///\r\n        /////////////////\r\n        cancellationRegistry.cancelPreviousSellOrders(sellOrder.seller, sellOrder.contractAddress, sellOrder.tokenId);\r\n        emit SellOrderFilled(sellOrder.seller, buyer, sellOrder.contractAddress, sellOrder.tokenId, sellOrder.price);\r\n\r\n        /////////////////\r\n        ///  Transfer ///\r\n        /////////////////\r\n        _transferNFT(sellOrder.contractAddress, sellOrder.tokenId, sellOrder.seller, buyer, sellOrder.quantity);\r\n\r\n        //////////////////////\r\n        ///  Send Payment ///\r\n        /////////////////////\r\n        if (sellOrder.paymentERC20 == address(0)) {\r\n            _sendETHPaymentsWithRoyalties(sellOrder.contractAddress, sellOrder.seller);\r\n        } else if (sellOrder.price > 0) {\r\n            _sendERC20PaymentsWithRoyalties(\r\n                sellOrder.contractAddress,\r\n                sellOrder.seller,\r\n                buyer,\r\n                sellOrder.price,\r\n                sellOrder.paymentERC20\r\n            );\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @dev Sends out ETH payments to marketplace, royalty, and the final recipients\r\n    */\r\n    function _sendETHPaymentsWithRoyalties(address contractAddress, address payable finalRecipient) internal {\r\n        uint256 royaltyPayout = (royaltyRegistry.getRoyaltyPayoutRate(contractAddress) * msg.value) / 1000;\r\n        uint256 makerPayout = (_makerFeePerMille * msg.value) / 1000;\r\n        uint256 remainingPayout = msg.value - royaltyPayout - makerPayout;\r\n\r\n        if (royaltyPayout > 0) {\r\n            Address.sendValue(royaltyRegistry.getRoyaltyPayoutAddress(contractAddress), royaltyPayout);\r\n        }\r\n\r\n        Address.sendValue(_makerWallet, makerPayout);\r\n        Address.sendValue(finalRecipient, remainingPayout);\r\n    }\r\n\r\n    function _sendERC20PaymentsWithRoyalties(\r\n        address contractAddress,\r\n        address seller,\r\n        address buyer,\r\n        uint256 price,\r\n        address paymentERC20\r\n    ) internal {\r\n        uint256 royaltyPayout = (royaltyRegistry.getRoyaltyPayoutRate(contractAddress) * price) / 1000;\r\n        uint256 makerPayout = (_makerFeePerMille * price) / 1000;\r\n        uint256 remainingPayout = price - royaltyPayout - makerPayout;\r\n\r\n        if (royaltyPayout > 0) {\r\n            IERC20(paymentERC20).safeTransferFrom(\r\n                buyer,\r\n                royaltyRegistry.getRoyaltyPayoutAddress(contractAddress),\r\n                royaltyPayout\r\n            );\r\n        }\r\n\r\n        IERC20(paymentERC20).safeTransferFrom(buyer, _makerWallet, makerPayout);\r\n        IERC20(paymentERC20).safeTransferFrom(buyer, seller, remainingPayout);\r\n    }\r\n\r\n    /* Checks that the payment is being made with an approved ERC20, and that we are allowed to operate\r\n     * a sufficient amount of it. */\r\n    function _checkValidERC20Payment(address buyer, uint256 price, address paymentERC20) internal view {\r\n        // Checks that the ERC20 payment token is approved in the registry.\r\n        require(paymentERC20Registry.isApprovedERC20(paymentERC20), \"Payment ERC20 is not approved.\");\r\n\r\n        // Checks that the buyer has sufficient funds.\r\n        require(\r\n            IERC20(paymentERC20).balanceOf(buyer) >= price,\r\n            \"Buyer has an insufficient balance of the ERC20.\"\r\n        );\r\n\r\n        // Checks that the Exchange contract has a sufficient allowance of the token.\r\n        require(\r\n            IERC20(paymentERC20).allowance(buyer, address(this)) >= price,\r\n            \"Exchange is not approved to handle a sufficient amount of the ERC20.\"\r\n        );\r\n    }\r\n\r\n    /*\r\n    * @dev Validate the sell order against the signature of the meta-transaction.\r\n    */\r\n    function _validateSellerSignature(SellOrder memory sellOrder, bytes memory signature) internal view returns (bool) {\r\n\r\n        bytes32 SELLORDER_TYPEHASH = keccak256(\r\n            \"SellOrder(address seller,address contractAddress,uint256 tokenId,uint256 startTime,uint256 expiration,uint256 price,uint256 quantity,uint256 createdAtBlockNumber,address paymentERC20)\"\r\n        );\r\n\r\n        bytes32 structHash = keccak256(abi.encode(\r\n                SELLORDER_TYPEHASH,\r\n                sellOrder.seller,\r\n                sellOrder.contractAddress,\r\n                sellOrder.tokenId,\r\n                sellOrder.startTime,\r\n                sellOrder.expiration,\r\n                sellOrder.price,\r\n                sellOrder.quantity,\r\n                sellOrder.createdAtBlockNumber,\r\n                sellOrder.paymentERC20\r\n            ));\r\n\r\n        bytes32 digest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, structHash);\r\n\r\n        address recoveredAddress = ECDSA.recover(digest, signature);\r\n        return recoveredAddress == sellOrder.seller;\r\n    }\r\n\r\n    /*\r\n    * @dev Validate the sell order against the signature of the meta-transaction.\r\n    */\r\n    function _validateBuyerSignature(BuyOrder memory buyOrder, bytes memory signature) internal view returns (bool) {\r\n\r\n        bytes32 BUYORDER_TYPEHASH = keccak256(\r\n            \"BuyOrder(address buyer,address contractAddress,uint256 tokenId,uint256 startTime,uint256 expiration,uint256 price,uint256 quantity,address paymentERC20)\"\r\n        );\r\n\r\n        bytes32 structHash = keccak256(abi.encode(\r\n                BUYORDER_TYPEHASH,\r\n                buyOrder.buyer,\r\n                buyOrder.contractAddress,\r\n                buyOrder.tokenId,\r\n                buyOrder.startTime,\r\n                buyOrder.expiration,\r\n                buyOrder.price,\r\n                buyOrder.quantity,\r\n                buyOrder.paymentERC20\r\n            ));\r\n\r\n        bytes32 digest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, structHash);\r\n\r\n        address recoveredAddress = ECDSA.recover(digest, signature);\r\n\r\n        return recoveredAddress == buyOrder.buyer;\r\n    }\r\n\r\n    function _fillBuyOrder(BuyOrder memory buyOrder, bytes memory signature, address payable seller) internal {\r\n        /////////////////\r\n        ///  Finalize ///\r\n        /////////////////\r\n        cancellationRegistry.cancelOrder(signature);\r\n        emit BuyOrderFilled(seller, buyOrder.buyer, buyOrder.contractAddress, buyOrder.tokenId, buyOrder.price);\r\n\r\n        /////////////////\r\n        ///  Transfer ///\r\n        /////////////////\r\n        _transferNFT(buyOrder.contractAddress, buyOrder.tokenId, seller, buyOrder.buyer, buyOrder.quantity);\r\n\r\n        //////////////////////\r\n        ///  Send Payment ///\r\n        /////////////////////\r\n        if (buyOrder.price > 0) {\r\n            _sendERC20PaymentsWithRoyalties(\r\n                buyOrder.contractAddress,\r\n                seller,\r\n                buyOrder.buyer,\r\n                buyOrder.price,\r\n                buyOrder.paymentERC20\r\n            );\r\n        }\r\n    }\r\n\r\n    function _fillDutchAuction(\r\n        DutchAuctionOrder memory dutchAuctionOrder,\r\n        address payable buyer,\r\n        uint256 currentPrice\r\n    ) internal {\r\n        /////////////////\r\n        ///  Finalize ///\r\n        /////////////////\r\n        cancellationRegistry.cancelPreviousSellOrders(dutchAuctionOrder.seller, dutchAuctionOrder.contractAddress, dutchAuctionOrder.tokenId);\r\n        uint256 amountPaid = dutchAuctionOrder.paymentERC20 == address(0) ? msg.value : currentPrice;\r\n        emit DutchAuctionFilled(dutchAuctionOrder.seller, buyer, dutchAuctionOrder.contractAddress, dutchAuctionOrder.tokenId, amountPaid);\r\n\r\n        /////////////////\r\n        ///  Transfer ///\r\n        /////////////////\r\n        _transferNFT(dutchAuctionOrder.contractAddress, dutchAuctionOrder.tokenId, dutchAuctionOrder.seller, buyer, dutchAuctionOrder.quantity);\r\n\r\n        //////////////////////\r\n        ///  Send Payment ///\r\n        /////////////////////\r\n        if (dutchAuctionOrder.paymentERC20 == address(0)) {\r\n            _sendETHPaymentsWithRoyalties(dutchAuctionOrder.contractAddress, dutchAuctionOrder.seller);\r\n        } else if (currentPrice > 0) {\r\n            _sendERC20PaymentsWithRoyalties(\r\n                dutchAuctionOrder.contractAddress,\r\n                dutchAuctionOrder.seller,\r\n                buyer,\r\n                currentPrice,\r\n                dutchAuctionOrder.paymentERC20\r\n            );\r\n        }\r\n    }\r\n\r\n    function _validateDutchAuctionSignature(\r\n        DutchAuctionOrder memory dutchAuctionOrder,\r\n        bytes memory signature\r\n    ) internal view returns (bool) {\r\n\r\n        bytes32 DUTCHAUCTIONORDER_TYPEHASH = keccak256(\r\n            \"DutchAuctionOrder(address seller,address contractAddress,uint256 tokenId,uint256 startTime,uint256 endTime,uint256 startPrice,uint256 endPrice,uint256 quantity,uint256 createdAtBlockNumber,address paymentERC20)\"\r\n        );\r\n\r\n        bytes32 structHash = keccak256(abi.encode(\r\n                DUTCHAUCTIONORDER_TYPEHASH,\r\n                dutchAuctionOrder.seller,\r\n                dutchAuctionOrder.contractAddress,\r\n                dutchAuctionOrder.tokenId,\r\n                dutchAuctionOrder.startTime,\r\n                dutchAuctionOrder.endTime,\r\n                dutchAuctionOrder.startPrice,\r\n                dutchAuctionOrder.endPrice,\r\n                dutchAuctionOrder.quantity,\r\n                dutchAuctionOrder.createdAtBlockNumber,\r\n                dutchAuctionOrder.paymentERC20\r\n            ));\r\n\r\n        bytes32 digest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, structHash);\r\n\r\n        address recoveredAddress = ECDSA.recover(digest, signature);\r\n\r\n        return recoveredAddress == dutchAuctionOrder.seller;\r\n    }\r\n\r\n    function _transferNFT(address contractAddress, uint256 tokenId, address seller, address buyer, uint256 quantity) internal {\r\n        if (contractAddress.supportsInterface(InterfaceId_ERC721)) {\r\n            IERC721 erc721 = IERC721(contractAddress);\r\n\r\n            /* require is approved for all */\r\n            require(erc721.isApprovedForAll(seller, address(this)), \"The Exchange is not approved to operate this NFT\");\r\n\r\n            /////////////////\r\n            ///  Transfer ///\r\n            /////////////////\r\n            erc721.transferFrom(seller, buyer, tokenId);\r\n\r\n        } else if (contractAddress.supportsInterface(InterfaceId_ERC1155)) {\r\n            IERC1155 erc1155 = IERC1155(contractAddress);\r\n\r\n            /////////////////\r\n            ///  Transfer ///\r\n            /////////////////\r\n            erc1155.safeTransferFrom(seller, buyer, tokenId, quantity, \"\");\r\n\r\n        } else {\r\n            revert(\"We don't recognize the NFT as either an ERC721 or ERC1155.\");\r\n        }\r\n    }\r\n}",
    "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"DutchAuctionFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentERC20\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelPreviousSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentERC20\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"fillBuyOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAtBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentERC20\",\"type\":\"address\"}],\"internalType\":\"struct ExchangeV4.DutchAuctionOrder\",\"name\":\"dutchAuctionOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"fillDutchAuctionOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAtBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentERC20\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"fillSellOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getRoyaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getRoyaltyPayoutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isOrderCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newMakerWallet\",\"type\":\"address\"}],\"name\":\"setMakerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cancellationRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentERC20Registry\",\"type\":\"address\"}],\"name\":\"setRegistryContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_payoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payoutPerMille\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "ContractName": "ExchangeV4",
    "CompilerVersion": "v0.8.9+commit.e5eed63a",
    "OptimizationUsed": "1",
    "Runs": "10000",
    "ConstructorArguments": "",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "MIT",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://a139b7ad35ffc547a78bf36f722abcecb18e2f07a73469fd7888b18f9570db0a"
}